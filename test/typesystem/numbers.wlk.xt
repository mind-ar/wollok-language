/* XPECT_SETUP org.uqbar.project.wollok.tests.typesystem.xpect.TypeSystemXpectTestCase END_SETUP */

object numberTest {

	// XPECT methodType at m0 --> (Any) => Void
	method m0(_a) {
		2.checkNotNull(_a, "m0")
		console.println("end")
	}

	// XPECT methodType at m1 --> (Number) => Number
	method m1(a) = (a ** 2).div(5)

	// XPECT methodType at m2 --> (Number, Number) => Number
	method m2(a, b) {
		return (a + b) / (a - b) * a
	}

	// XPECT methodType at m3 --> (Object) => Boolean
	method m3(a) {
		return a === 2
	}
	
	// XPECT methodType at m4 --> (Any) => Boolean
	method m4(a) {
		return 3 == a
	}
	
	// XPECT methodType at m6 --> (Number) => Number
	method m6(a) {
		return a % 2
	}
	
	// XPECT methodType at m7 --> (Number) => Range
	method m7(a) {
		return 1..(a)
	}
	
	// XPECT methodType at m8 --> (Number) => Boolean
	method m8(a) = a > (a - 1)

	// XPECT methodType at m9 --> (Number) => Boolean
	method m9(a) = a < (a - 1)

	// XPECT methodType at m10 --> (Number) => Boolean
	method m10(a) = a <= (a - 1)

	// XPECT methodType at m11 --> (Number) => Number
	method m11(a) = if (a >= 0) 0 else 1

	// XPECT methodType at m12 --> (Number) => Number
	method m12(a) = a.abs() + 1

	// XPECT methodType at m13 --> (Number) => Number
	method m13(a) {
		// XPECT type at value --> Number
		const value = a.invert()
		return a.max(value)
	}

	// XPECT methodType at m14 --> (Number) => Number
	method m14(a) = a.min(a.limitBetween(0, 1))
	
	// XPECT methodType at m15 --> (Number) => Boolean
	method m15(a) = (a + 1).between(0, 10)

	// XPECT methodType at m16 --> (Number) => Number
	method m16(a) = a.square()

	// XPECT methodType at m17 --> (Number) => Number
	method m17(a) = a.squareRoot()

	// XPECT methodType at m18 --> (Number) => Number
	method m18(a) = if (a.even()) 2 else 1

	// XPECT methodType at m19 --> (Number) => Number
	method m19(a) = if (a.odd()) 2 else 1

	// XPECT methodType at m20 --> (Number) => Number
	method m20(a) {
		// XPECT type at value --> Number
		const value = a.rem(a)
		return value.roundUp(2)
	}

	// XPECT methodType at m21 --> (Number) => Number
	method m21(a) = a.roundUp() + a.randomUpTo(2)
	
	// XPECT methodType at m22 --> (Number) => Number
	method m22(a) = a.truncate(3)

	// XPECT methodType at m23 --> (Number, Number) => Number
	method m23(a, b) = a.gcd(b + 1)

	// XPECT methodType at m24 --> (Number, Number) => Number
	method m24(a, b) = a.lcm(b + 1)

	// XPECT methodType at m25 --> (Number) => Boolean
	method m25(a) {
		// XPECT type at value --> Number
		const value = a.digits()
		return value.isInteger()
	}

	// XPECT methodType at m26 --> (Number) => Number
	method m26(a) = a.plus()
	
	// XPECT methodType at m27 --> (Number) => Boolean
	method m27(a) {
		var b = 0
		a.times({ i => b = i })
		return a.isPrime()
	}

	// XPECT methodType at m30 --> (Number) => String
	method m30(n) = n.stringValue()
	
	// XPECT methodType at m31 --> (Number) => Number
	method m31(n) = -n
	
	// XPECT methodType at m32 --> (Number) => Number
	method m32(n) = +n
}
