/* XPECT_SETUP org.uqbar.project.wollok.tests.typesystem.xpect.TypeSystemXpectTestCase END_SETUP */
import wollok.game.*

object positionTest {
	
	// XPECT methodType at m1 --> (Position, Number) => Number
	method m1(pos, n) {
		return pos.left(n).x()
	}

	// XPECT methodType at m2 --> (Position, Number) => Number
	method m2(pos, n) {
		return pos.up(n).y()
	}
	
	// XPECT methodType at m3 --> (Number, Number) => Position 
	method m3(_x, _y) {
		return new Position(x = _x, y = _y)
	}

	// XPECT methodType at m4 --> (Position, Number) => Position
	method m4(pos, n) = pos.right(n).down(n)

	// XPECT methodType at m8 --> (Position, Any) => Void
	method m8(pos, obj) {
		pos.drawElement(obj)
	}
	
	// XPECT methodType at m9 --> (Position, Any) => Void
	method m9(pos, obj) {
		pos.drawCharacter(obj)
	}
	
	// XPECT methodType at m11 --> (Any, String) => Void
	method m11(obj, msj) {
		new Position().say(obj, msj) //TODO: Game.say
	}
	
	// XPECT methodType at m12 --> (Position) => List<Any>
	method m12(pos) {
		return pos.allElements()
	}
	
	// XPECT methodType at m122 --> (Position) => List<Number>
	method m122(pos) {
		return pos.allElements().filter{n => n > 3}
	}
	
	// XPECT methodType at m13 --> (Position) => Position
	method m13(pos) {
		return pos.clone()
	}
	
	// XPECT methodType at m14 --> (Position, Position) => Number
	method m14(pos1, pos2) {
		return pos1.distance(pos2)
	}
	
	// XPECT methodType at m15 --> () => String
	method m15() {
		// XPECT type at p --> Position
		const p = new Position()
		p.clear()
		return p.toString()
	}
}