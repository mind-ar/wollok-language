import wollok.lang.io.*
import wollok.game.*

object closureMock {
  const property calls = []
  method calledCount() = calls.size()
  method called() = self.calledCount() > 0
  method calledWith(args...) = calls.contains(args)
  method apply(args...) { calls.add(args) }
}

object closureDomainErrorMock {
  method apply(args...) { self.error('FAIL') }
}

object closureErrorMock {
  method apply(args...) = 1 / 0
}

describe 'flush events' {

  override method initialize() {
    game.start()
  }

  test 'should clear event queue' {
    io.queueEvent('')
    io.flushEvents(0)
    assert.equals([], io.eventQueue())
  }

  test 'should apply event handlers' {
    io.queueEvent('EVENT')
    io.addEventHandler('EVENT', closureMock)
    io.flushEvents(0)
    assert.that(closureMock.called())
  }

  test 'should not apply event handlers' {
    io.queueEvent('EVENT')
    io.addEventHandler('OTHER', closureMock)
    io.flushEvents(0)
    assert.notThat(closureMock.called())
  }

  test 'should apply all time handlers' {
    io.addTimeHandler('A', closureMock)
    io.addTimeHandler('B', closureMock)
    io.flushEvents(0)
    assert.equals(2, closureMock.calledCount())
  }

  test 'should apply time handlers with new time' {
    io.addTimeHandler('', closureMock)
    io.flushEvents(10)
    assert.that(closureMock.calledWith(10))
  }

  test 'should update current time' {
    io.flushEvents(100)
    assert.equals(100, io.currentTime())
  }


  test 'throws exception on queue event should not propagate' {
    io.queueEvent('EVENT')
    io.addEventHandler('EVENT', closureDomainErrorMock)
    io.flushEvents(0)
  }

  test 'throws exception on time event should not propagate' {
    io.addTimeHandler('', closureDomainErrorMock)
    io.flushEvents(0)
  }

  test 'throws domain exception on event with error handler' {
    io.domainExceptionHandler(closureMock)
    io.addTimeHandler('', closureDomainErrorMock)
    io.flushEvents(0)
    assert.that(closureMock.called())
  }

  test 'throws exception on event with error handler' {
    io.exceptionHandler(closureMock)
    io.addTimeHandler('', closureErrorMock)
    io.flushEvents(0)
    assert.that(closureMock.called())
  }

  test 'throws exception on event with error handler do not call domain handler' {
    io.domainExceptionHandler(closureMock)
    io.addTimeHandler('', closureErrorMock)
    io.flushEvents(0)
    assert.notThat(closureMock.called())
  }
}
