import wollok.game.*

/**
  * Scenario: 
  * - a position pointing to the origin of coordinates
  * - a visual component with a position property
  * - a visual component with a position method
  * - a visual component without position at all
  * - a generic class Visual
  */
const origin = new Position(x = 0, y = 0)

const position = new Position(x = 2, y = 2)

const visualWithPositionProperty = object {
  var property position = new Position(x = 0, y = 0)
  method image() = "image.png"
}

const visualWithPositionMethod = object {
  method position() = new Position(x = 0, y = 0)
  method image() = "image.png"
}

const visualWithoutPosition = object {
  method image() = "image.png"
}

class Visual {
  var property position = origin

  method image() = "image.png"
}

/**
  * Tests
  */
describe "position" {

  override method initialize() {
    game.clear()
  }

  test "equality by coordinates" {
    assert.equals(new Position(x = 0, y = 0), origin)
  }

  test "default values for position is the origin" {
    const defaultPosition = new Position()
    assert.equals(0, defaultPosition.x())
    assert.equals(0, defaultPosition.y())
  }

  test "toString" {
    assert.equals("0@0", origin.toString())
  }

  test "distance using null should fail" {
    assert.throwsException { => origin.distance(null) }
  }

  test "distance" {
    assert.equals(5, origin.distance(new Position(x = 3, y = 4)))
  }

  test "position can be accessed by getter method" {
    game.addVisual(visualWithPositionMethod)
    assert.equals(origin, visualWithPositionMethod.position())
  }

  test "position can be accessed by property" {
    game.addVisual(visualWithPositionProperty)
    assert.equals(origin, visualWithPositionProperty.position())
  }

  test "position cannot be accessed via attribute" {
    const visual = object {
      const position = new Position(x = 0, y = 0)
      method image() = "image.png"
      method swapp() { return new Position(x = position.y(), y = position.x())}
    }
    assert.throwsException { game.addVisual(visual) }
  }

  test "visual object without position cannot be rendered" {
    assert.throwsException{ game.addVisual(visualWithoutPosition) }
  }

  test "clear should remove all visuals in it" {
      2.times{ i => game.addVisual(new Visual()) }
      game.addVisual(new Visual(position = new Position(x = 1, y = 1)))
      assert.equals(3, game.allVisuals().size())
      origin.clear()
      assert.equals(1, game.allVisuals().size())
  }

  test "positions are not rounded at instantiation" {
    const x = 1.4
    const y = 3.6
    const defaultPosition = game.at(x,y)
    assert.equals(x, defaultPosition.x())
    assert.equals(y, defaultPosition.y())
  }
  
  test "move right should create a new position" {
  	assert.equals(new Position(x = 4, y = 2), position.right(2))  	
  }
  
  test "move left should create a new position" {
  	assert.equals(new Position(x = 0, y = 2), position.left(2))  	
  }
  
  test "move up should create a new position" {
  	assert.equals(new Position(x = 2, y = 4), position.up(2))  	
  }
  
  test "move down should create a new position" {
  	assert.equals(new Position(x = 2, y = 0), position.down(2))  	
  }
  
  test "position should be rounded" {
  	const unroundedPosition = new Position(x = 1.2, y = 1.7)
  	assert.equals(new Position(x = 1, y = 2), unroundedPosition.round())
  }
}