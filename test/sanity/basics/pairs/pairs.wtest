describe "pairs" {

  const pair = 1->2

  test "smoke test" {
    const anotherPair = new Pair(x = 1, y = 2)
    assert.equals(anotherPair, anotherPair)
  }

  test "new pair" {
    const anotherPair = new Pair(x = 1, y = 2)
    assert.equals(1, anotherPair.x())
    assert.equals(2, anotherPair.y())
  }

  test "arrow" {
    const anotherPair = 1->2
    assert.equals(1, anotherPair.x())
    assert.equals(2, anotherPair.y())
  }

  test "x getter" {
    const anotherPair = "1"->2
    assert.equals("1", anotherPair.x())
  }

  test "y getter" {
    const anotherPair = 1->"2"
    assert.equals("2", anotherPair.y())
  }

  test "x constant property cannot be modified" {
    assert.throwsException { pair.x(10) }
  }

  test "y constant property cannot be modified" {
    assert.throwsException { pair.y(10) }
  }

  test "key getter" {
    assert.equals(1, pair.key())
  }

  test "value getter" {
    assert.equals(2, pair.value())
  }

  test "key setter does not exist" {
    assert.throwsException { pair.key(10) }
  }

  test "value setter does not exist" {
    assert.throwsException { pair.value(20) }
  }

  test "toString representation" {
    assert.equals("1 -> 2", pair.toString())
  }

}